//press r on keyboard after creating polygon


#include <iostream>
#include <cmath>
#include <GL/glut.h>

using namespace std;

int m[20][2], n = 0;
float angle = 0.0f; // Rotation angle in degrees
bool isClockwise = false; // Flag to determine the direction of rotation

void setpixel(GLint x, GLint y)
{
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_POINTS);
    glVertex2f(x, y);
    glEnd();
    glFlush();
}

void setpcolor(double r1, double b1, double g1)
{
    glColor3f(r1, b1, g1);
}

void drawPolygon()
{
    // Draw the polygon
    setpcolor(1, 1, 1);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < n; i++)
        glVertex2i(m[i][0], m[i][1]);
    glEnd();
}

void rotation()
{
    float theta = angle * (3.14159 / 180.0); // Convert angle to radians

    if (isClockwise)
        theta = -theta; // Invert angle for clockwise rotation

    float cos_theta = cos(theta);
    float sin_theta = sin(theta);

    // Apply rotation transformation
    for (int i = 0; i < n; i++)
    {
        int x = m[i][0];
        int y = m[i][1];
        m[i][0] = x * cos_theta - y * sin_theta;
        m[i][1] = x * sin_theta + y * cos_theta;
    }

    glClear(GL_COLOR_BUFFER_BIT); // Clear the screen
    drawPolygon(); // Redraw the rotated polygon
    glFlush();
}

void init()
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 0.0);
    glPointSize(2.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-350, 350, -350, 350);
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    // Draw original polygon
    drawPolygon();
    glFlush();
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'r':
    case 'R':
        // Prompt the user for rotation angle
        cout << "Enter rotation angle in degrees: ";
        cin >> angle;
        cout << "Enter rotation direction ('c' for clockwise, 'a' for anticlockwise): ";
        char direction;
        cin >> direction;
        if (direction == 'c' || direction == 'C')
            isClockwise = true;
        else
            isClockwise = false;
        rotation(); // Perform rotation
        break;
    default:
        break;
    }
}

void mouse(int button, int state, int x, int y)
{
    if (state == GLUT_DOWN)
    {
        if (button == GLUT_LEFT_BUTTON)
        {
            m[n][0] = x - 350;
            m[n][1] = 350 - y; // Flip y-axis to match OpenGL convention
            m[n][2] = 1;
            n++;
            glutPostRedisplay(); // Request redraw to display the new point
        }
    }
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(700, 700);
    glutInitWindowPosition(500, 50);
    glutCreateWindow("ROTATION ONLY");
    init();

    // Registering display, keyboard, and mouse callback functions
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);

    glutMainLoop();
    return 0;
}
